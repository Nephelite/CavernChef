SORTING ORDER:
1.) Alphabetical order of the script of origin
2.) Reverse chronological order of delete date




~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Enemy.cs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Deleted 2022-6-13 (comments from a few days ago for EnemyStatus) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

/* TODO
Implement class to encapsulate enemy status (name to be decided)
Include stuff like
    hp
    dmg
    speed
    status effects
So that it'll be easier to handle possible status effects

Fix up the 
*/

Deleted 2022-6-13 (old comments from when I implemented EnemyList about a week ago) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

/* TODO
Main goals:
1.) Make speed system consistent (aka change the copy pasted code in Wispy)
2.) Implement priority queue for enemyList
3.) Implement range for turret

- Copy the idea for bullet movement over for enemies
- Implement `EnemyList` class
- Implement abstract `Enemy` class
- Implement abstract 'AtkTower' class

abstract class Enemy extends MonoBehaviour
    Fields
        static float speed
        float hp
        static GameObject[] waypoints (Maybe WayPoints[]?)
        float priority
            Basically distance to walk to get to the food
            Lower value => Higher prio for turrets if in range
    Methods
        Start()
        Update()



(Impl details moved to comment in GlobalVariables.cs)
class EnemyList   (to be placed in GlobalVariables.cs)
    Fields
        Enemy[100] enemies = [null for i in range(100)]
        int numEnemies     = 0
        int numDead        = 0
    Methods
        add(Enemy nextEnemy)
        kill(Enemy deadEnemy)
        rearrange()
        findTarget(Vector2 towerPos, float range)
        reset()
        


// Wait why was I planning this again what
abstract class AtkTower extends MonoBehaviour
*/





~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Wispy.cs 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Deleted 2022-6-13 (old field setting before being moved to Enemy.cs) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /*

    /* Wispy Properties * /
    public static float speed = 5.0f;   // Wispy fast
    // Currently a float in case fractional dmg is a thing ig
    public float hp = 10.0f;   // Wispy fragile

    /* Wispy Movement * /
    // [HideInInspector]
    public List<GameObject> waypoints;
    private int currentWaypoint = 0;
    private float lastWaypointSwitchTime;
    //public float speed = wispSpeed;

    */


Deleted 2022-6-13 (old movement code that was mostly copy pasted) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                // TODO
                /* How I did it last time for Basic Bullet
                    Vector2 traj = enemyPos - bulletPos;                 // Trajectory
                    float dist = traj.magnitude;   
                        Vector2 delta = traj * speed / dist;
                        gameObject.transform.position += (Vector3) delta;//Type cast needed since .trans.pos is 3-dim
                */





                /*

                // FOLLOWING THE PATH (Start)
                // 1 
                Vector3 startPosition = waypoints[currentWaypoint].transform.position;     // Prev waypoint's coord
                Vector3 endPosition = waypoints[currentWaypoint + 1].transform.position;   // Next waypoint's coord

                // 2 
                float pathLength = Vector3.Distance(startPosition, endPosition);   // dist(prev waypt, next waypt)
                float totalTimeForPath = pathLength / speed;                       // time from prev to next waypt
                float currentTimeOnPath = Time.time - lastWaypointSwitchTime;      // time on curr segment so far
                // Lerp(X,Y,frac) moves the thing to the point `frac` of the way along the vector \vec{XY}
                gameObject.transform.position = Vector2.Lerp(startPosition, endPosition, currentTimeOnPath / totalTimeForPath);

                // 3 
                if (gameObject.transform.position.Equals(endPosition))   // Reached next waypt
                {
                    if (currentWaypoint < waypoints.Count - 2)  //Not yet at the end
                    {
                        // 3.a 
                        currentWaypoint++;                    // Next segment
                        lastWaypointSwitchTime = Time.time;   // Reset last switch time
                        // TODO: Rotate into move direction (not really req rn, some games 
                        // like The Creeps don't even do this)
                    }
                    else   //At the end
                    {
                        // 3.b 
                        Destroy(gameObject);

                    /*
                    AudioSource audioSource = gameObject.GetComponent<AudioSource>();
                    AudioSource.PlayClipAtPoint(audioSource.clip, transform.position);
                    * /

                    // TODO: deduct bsae hp
                    // TODO: 
                    }
                }
                // FOLLOWING THE PATH (End)

                */